import telebot
from fuzzywuzzy import process
from fuzzywuzzy import fuzz
import time
import sqlite3

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω. –ü–û–ú–ù–ò–¢–ï –û –†–ò–°–ö–ê–• –ë–ï–ó–û–ü–ê–°–¢–ò! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!
TOKEN = ""

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏ —á–∞—Ç–∞
CHANNEL_ID = -1002174986339
CHAT_ID = -1002461559065
POST_ID = 59

bot = telebot.TeleBot(TOKEN)

roles = [
    "–ê–∫–∏—Ä–∞ –ú–∞–¥–æ", "–ê–∫–∏—Ö–∏—Ä–æ –ö–∞–Ω–æ", "–ê—Ä–∞—Ç–∞ –ö–∏—Ä–∏—à–∏–º–∞", "–ê—é–º–∏ –•–æ–≥–∏", "–ê—è—Ç–æ –ö–∏—Ä–∏—à–∏–º–∞", "–ë–∏–≥ –ú–∞–¥–∞–º",
    "–ì–∏–Ω—à–∏ –®–∏—Ä–∞–∑—É", "–î–∂—É–∑–æ –°—É–∑—É—è", "–î–æ–Ω–∞—Ç–æ –ü–æ—Ä–ø–æ—Ä–∞", "–ò–≤–∞–æ –ö—É—Ä–æ–∏–≤–∞", "–ò—Ç–æ—Ä–∏", "–ò—Ç—Å—É–∫–∏ –ú–∞—Ä—É–¥–µ",
    "–ò—á–∏–∫–∞ –ö–∞–Ω–µ–∫–∏", "–ô–æ—Ä–∏–∫–æ –ö–æ—Å–∞–∫–∞", "–ô–æ—à–∏–º—É—Ä–∞", "–ô–æ—à–∏—Ç–æ–∫–∏ –í–∞—à—É", "–ö–∞–∑—É–∏—á–∏ –ë–∞–Ω–¥–∂–æ",
    "–ö–∞–Ω–∞—ç –§–æ–Ω –†–æ–∑–µ–≤–∞–ª—å–¥", "–ö–∞—è –ò—Ä–∏–º–∏", "–ö–µ–Ω –ö–∞–Ω–µ–∫–∏", "–ö–∏–º –ù–∏—à–∏–Ω–æ", "–ö–∏—à–æ –ê—Ä–∏–º–∞", "–ö–∏—ë–∫–æ –ê—É—Ä–∞",
    "–ö–æ—Ä–∏ –£–∏", "–ö–æ—Ç–∞—Ä–æ –ê–º–æ–Ω", "–ö—É–∫–∏ –£—Ä–∏–µ", "–ö—É—Ä–µ–æ –ú–∞–¥–æ", "–ö—É—Ä–æ–Ω–∞ –Ø—Å—É—Ö–∏—Å–∞", "–ú–∞—Ç–∞—Å–∞–∫–∞ –ö–∞–º–∏—à–∏—Ä–æ",
    "–ú–∞—Ü—É—Ä–∏ –í–∞—à—É", "–ú–∞—é", "–ú–∏–∑–∞ –ö—É—Å–∞–∫–∞—Ä–∏", "–ú–∏–Ω–∞–º–∏ –£—Ä—É–∫–∞", "–ù–∞–∫–∏", "–ù–∞—à–∏—Ä–æ –Ø—Å—É—Ö–∏—Å–∞", "–ù–∏–∫–æ",
    "–ù–∏–º—É—Ä–∞ –§—É—Ä—É—Ç–∞", "–ù–∏—à–∏–∫–∏ –ù–∏—à–∏–æ", "–†–µ–Ω–¥–∂–∏ –ô–æ–º–æ", "–†–∏–∑–µ –ö–∞–º–∏—à–∏—Ä–æ", "–†–æ–º–∞ –•–æ–∏—Ç–æ",
    "–°–∞–π–∫–æ –ô–æ–Ω–µ–±–æ—è—à–∏", "–°–∞—Å–∞–∫–∏ –•–∞–π—Å–µ", "–°–µ–π–¥–æ –¢–∞–∫–∏–∑–∞–≤–∞", "–¢–∞–∫–µ–æ–º–∏ –ö—É—Ä–æ–∏–≤–∞", "–¢–∞—Ç–∞—Ä–∞",
    "–¢–æ–æ—Ä—É –ú—É—Ç—Å—É–∫–∏", "–¢–æ—É–∫–∞ –ö–∏—Ä–∏—à–∏–º–∞", "–¢–æ—É–º–∞ –•–∏–≥–µ–º–∞—Ä—É", "–£—Ç–∞", "–•–∞–∏—Ä—É –ò—Ö–µ–π",
    "–•–∏–¥–µ–π–æ—à–∏ –ù–∞–≥–∞—á–∏–∫–∞", "–•–∏–Ω–∞–º–∏ –§—É–µ–≥—É—á–∏", "–®–∏–∫–æ—Ä–∞–µ", "–®–∏–Ω—Å–∞–Ω–ø–µ–π –ê—É—Ä–∞", "–®—É –¶—É–∫–∏—è–º–∞", "–≠—Ç–æ",
    "–Æ–∫–∏–Ω–æ—Ä–∏ –®–∏–Ω–æ—Ö–∞—Ä–∞"
]

user_data = {}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def create_db():
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (user_id INTEGER PRIMARY KEY, role TEXT, username TEXT, link_attempts INTEGER)''')
    conn.commit()
    conn.close()

def add_user_to_db(user_id, role, username):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    existing_user = cursor.fetchone()
    if existing_user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("UPDATE users SET role=?, username=?, link_attempts=0 WHERE user_id=?", (role, username, user_id))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute("INSERT INTO users (user_id, role, username, link_attempts) VALUES (?, ?, ?, ?)", (user_id, role, username, 0))
    conn.commit()
    conn.close()

def increment_link_attempts(user_id):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET link_attempts = link_attempts + 1 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def get_link_attempts(user_id):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute("SELECT link_attempts FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
def create_invite_link(chat_id, bot):
    try:
        invite_link = bot.create_chat_invite_link(chat_id, member_limit=1, expire_date=int(time.time()) + 60)
        return invite_link.invite_link
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç
def check_user_in_chat(chat_id, user_id, bot):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
def edit_channel_post(channel_id, message_id, new_text, bot):
    try:
        bot.edit_message_text(new_text, channel_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã —Ä–æ–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ
def find_and_replace_role(text, role, username):
    lines = text.split("\n")
    for i, line in enumerate(lines):
        if line.strip().startswith(role):
            lines[i] = f"- {role} üåü –ó–∞–Ω—è–ª (@ {username})"
            break
    new_text = "\n".join(lines)
    return new_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def promote_user(chat_id, user_id, role, bot):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞
        member = bot.get_chat_member(chat_id, user_id)
        if member.status == "creator":
            print("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞.")
            return

        bot.promote_chat_member(chat_id, user_id, can_change_info=False, can_delete_messages=False,
                                can_invite_users=False, can_restrict_members=False, can_pin_messages=False,
                                can_promote_members=False, can_manage_chat=False)
        bot.set_chat_administrator_custom_title(chat_id, user_id, role)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_name = message.from_user.first_name
    text = f"–ü—Ä–∏–≤–µ—Ç {user_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Ñ–ª—É–¥–∞ –ø–æ –¢–æ–∫–∏–π—Å–∫–æ–º—É –ì—É–ª—éü©∏.\n"
    text += "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º —Ñ–ª—É–¥–µüìñ.\n"
    text += "–¢–∞–∫ –∂–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª—É–¥üëë!\n"
    text += "‚ñ∂Ô∏è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî ‚óÄÔ∏è\n"
    text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        telebot.types.KeyboardButton("–í—Å—Ç—É–ø–∏—Ç—åüöÄ"),
        telebot.types.KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—èüëë"),
        telebot.types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìö"),
        telebot.types.KeyboardButton("–í–∏–¥–µ–æüìπ")
    ]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—Å—Ç—É–ø–∏—Ç—åüöÄ"
@bot.message_handler(func=lambda message: message.text == "–í—Å—Ç—É–ø–∏—Ç—åüöÄ")
def join_chat(message):
    user_data[message.chat.id] = {"step": "role_choice"}
    user_name = message.from_user.first_name
    msg = bot.send_message(message.chat.id, f"‚ùì | –•–æ—Ä–æ—à–æ @{user_name}! –ù–∞–ø–∏—à–∏ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—à—å –≤—ã–±—Ä–∞—Ç—å.")
    bot.register_next_step_handler(msg, process_role_choice)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
def process_role_choice(message):
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get("step") != "role_choice":
        return

    user_name = message.from_user.first_name
    chosen_role = message.text

    if chosen_role in roles:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–î–∞‚úÖ", callback_data=f"yes_{chosen_role}"),
                     telebot.types.InlineKeyboardButton("–ù–µ—Ç‚ùå", callback_data=f"no_{chosen_role}"))
        msg = bot.send_message(message.chat.id, f"‚ùì | @{user_name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {chosen_role}", reply_markup=keyboard)
        bot.register_next_step_handler(msg, handle_confirmation)
    else:
        closest_match = process.extractOne(chosen_role, roles, scorer=fuzz.partial_ratio, score_cutoff=60)
        if closest_match:
            closest_role, score = closest_match
            if score >= 90:
                keyboard = telebot.types.InlineKeyboardMarkup()
                keyboard.add(telebot.types.InlineKeyboardButton("–î–∞‚úÖ", callback_data=f"yes_{closest_role}"),
                             telebot.types.InlineKeyboardButton("–ù–µ—Ç‚ùå", callback_data=f"no_{closest_role}"))
                bot.send_message(message.chat.id, f"‚ùì | @{user_name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {closest_role}", reply_markup=keyboard)
            else:
                keyboard = telebot.types.InlineKeyboardMarkup()
                keyboard.add(telebot.types.InlineKeyboardButton("–î–∞‚úÖ", callback_data=f"yes_{closest_role}"),
                             telebot.types.InlineKeyboardButton("–ù–µ—Ç‚ùå", callback_data=f"no_{closest_role}"))
                bot.send_message(message.chat.id, f"‚ùì | @{user_name}, –º–æ–∂–µ—Ç –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É —ç—Ç—É —Ä–æ–ª—å? {closest_role}", reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, f"‚ùì | @{user_name}, —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(message, process_role_choice)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–æ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("yes_"))
def callback_query(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    chosen_role = call.data[4:]
    username = call.from_user.username

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
    invite_link = create_invite_link(CHAT_ID, bot)
    if not invite_link:
        bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –∏ —Ç–∞–π–º–µ—Ä–æ–º
    message = bot.send_message(chat_id, f"‚úÖ | –û—Ç–ª–∏—á–Ω–æ, @{call.from_user.first_name}, —è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é {chosen_role}!\n‚úÖ | –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª—É–¥!\n‚úÖ | {invite_link}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    start_time = time.time()
    while time.time() - start_time < 60:
        time_left = int(60 - (time.time() - start_time))
        if time_left > 0:
            bot.edit_message_text(f"‚úÖ | –û—Ç–ª–∏—á–Ω–æ, @{call.from_user.first_name}, —è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é {chosen_role}!\n‚úÖ | –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª—É–¥!\n‚úÖ | {invite_link} | {time_left} —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å", chat_id, message.message_id)
        time.sleep(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_in_chat(CHAT_ID, user_id, bot):
        bot.edit_message_text(f"‚úÖ | –û—Ç–ª–∏—á–Ω–æ, @{call.from_user.first_name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è, —Ç–µ–ø–µ—Ä—å —Ç—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Ñ–ª—É–¥–∞!\n‚úÖ | –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!", chat_id, message.message_id)
        add_user_to_db(user_id, chosen_role, username)
        promote_user(CHAT_ID, user_id, chosen_role, bot)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            current_message = bot.get_message(CHANNEL_ID, POST_ID)
            if current_message:
                current_text = current_message.text
            if messages and len(messages) > 0:
                current_message = messages[0]
                current_text = current_message.text

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                new_text = find_and_replace_role(current_text, chosen_role, username)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
                if new_text != current_text:
                    edit_channel_post(CHANNEL_ID, POST_ID, new_text, bot)
                else:
                    print("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            else:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
    else:
        bot.edit_message_text(f"‚ùå | –ò–∑–≤–∏–Ω–∏ @{call.from_user.first_name}, —Ç—ã –Ω–µ —É—Å–ø–µ–ª!", chat_id, message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data=f"new_link_{chosen_role}"))
        bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("new_link_"))
def new_link_callback(call):
    user_id = call.from_user.id
    link_attempts = get_link_attempts(user_id)
    if link_attempts >= 3:
        bot.answer_callback_query(call.id, text="–¢—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª –≤—Å–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–∫–∏! –ù–∞–ø–∏—à–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! @Frelinq")
        return

    chosen_role = call.data[9:]
    invite_link = create_invite_link(CHAT_ID, bot)
    if not invite_link:
        bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
        return

    bot.edit_message_text(f"‚úÖ | –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª—É–¥!\n‚úÖ | {invite_link}", call.message.chat.id, call.message.message_id)
    increment_link_attempts(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—èüëë", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìö", "–í–∏–¥–µ–æüìπ"])
def handle_menu_buttons(message):
    if message.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—èüëë":
        bot.send_message(message.chat.id, "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±—É–¥—É—Ç –∑–¥–µ—Å—å.")
    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìö":
        bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–ª—É–¥–µ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")
    elif message.text == "–í–∏–¥–µ–æüìπ":
        bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
create_db()
bot.polling(none_stop=True)
